#ifndef ITER_DOLLAR_MACROS_DEFINE_HPP
#define ITER_DOLLAR_MACROS_DEFINE_HPP

#include "extend/dollar_macros/define.hpp"

#define $to_iter $(::iter::to_iter)
#define $next $(::iter::next)
#define $cycle $(::iter::cycle)
#define $until $(::iter::until)
#define $filter $(::iter::filter)
#define $take $(::iter::take)
#define $take_while $(::iter::take_while)
#define $skip $(::iter::skip)
#define $skip_while $(::iter::skip_while)
#define $flatten $(::iter::flatten)
#define $flatmap $(::iter::flatmap)
#define $filter_map $(::iter::filter_map)
#define $map $(::iter::map)
#define $map_while $(::iter::map_while)
#define $zip $(::iter::zip)
#define $enumerate $(::iter::enumerate)
#define $chain $(::iter::chain)
#define $inspect $(::iter::inspect)
#define $to_pointer_iter $(::iter::to_pointer_iter)
#define $move $(::iter::move)
#define $box $(::iter::box)
#define $foreach $(::iter::foreach)
#define $fold $(::iter::fold)
#define $reduce $(::iter::reduce)
#define $sum $(::iter::sum)
#define $product $(::iter::product)
#define $last $(::iter::last)
#define $nth $(::iter::nth)
#define $max $(::iter::max)
#define $max_by $(::iter::max_by)
#define $min $(::iter::min)
#define $min_by $(::iter::min_by)
#define $find_linear $(::iter::find_linear)
#define $find_map $(::iter::find_map)
#define $any $(::iter::any)
#define $all $(::iter::all)
#define $collect $(::iter::collect)
#define $partition $(::iter::partition)
#define $unzip $(::iter::unzip)
#define $sorted $(::iter::sorted)

#endif /* ITER_DOLLAR_MACROS_DEFINE_HPP */
